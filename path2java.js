// path2java
// converts a path produced by the client GUI into java source code
// AKA the meat and potatoes of the project (I guess the GUI is the real cool part but whatever)

// PACKAGE IMPORTS
const Template = require("./template.js");

const eofString = "\n\n/* Generated by AutoTools.  Do not remove this line. */";

const TABBING = ["", "	", "		", "			", "				"];

// converts a node path into java
// the nodepath provided is what will be converted
// it will write all necessary files into the path provided by outpath
// the name of the auto itself will be the parameter name
// actionIndexes is all actionIndexes in use by the auto
function path2java(nodepath, outpath, name, actionIndexes){
	// load templates
	// TODO: sort action indexes
	let configTemplate = new Template("./templates/Config.template");
	let autoTemplate = new Template("./templates/Auto.template");
	
	// figure out what year it is
	let year = new Date().getFullYear();
	
	// team name
	let teamName = "FIRST Tech Challenge Team 13406"; // TODO: allow change
	
	// throw year and team name into copyright notice
	configTemplate.replaceTag("year", year);
	configTemplate.replaceTag("teamName", teamName);
	
	autoTemplate.replaceTag("year", year);
	autoTemplate.replaceTag("teamName", teamName);
	
	// replace auto name with name
	autoTemplate.replaceTag("name", name);
	
	// INITONCE
	let tab = 2; // number of tabs to indent each line, changes depending on block
	
	let initOnce = "/* no initOnce required */";
	
	autoTemplate.replaceTag("initOnce", initOnce);
	
	// INIT
	tab = 3;
	let init = "telemetry.addData(\"Status\", \"Initialized\");\n" + TABBING[tab] + "telemetry.update();";
	
	autoTemplate.replaceTag("init", init);
	
	// MAIN
	tab = 2;
	let main = "";
	
	// loop through nodes and add lines for each action
	for(let i = 0; i < nodepath.nodes.length; i++){
		let node = nodepath.nodes[i];
		
		// add any node actions
		for(let j = 0; j < node.actions.length; j++){
			let action = node.actions[j];
			let actionName = action[0];
			let parameters = action[1];
			
			// format into line of java
			let line = actionName + "(";
			let comment = " //"; // comment which follows the line to document the parameters
			
			for(let p in parameters){
				line += parameters[p] + ", ";
				comment += p + "=" + parameters[p] + ", ";
			}
			
			// remove extra comma
			line = line.slice(0, -2);
			comment = comment.slice(0, -2);
			
			line += ");"
			
			// add comment to line
			line += comment;
			
			// insert line into main
			main += TABBING[tab] + line + "\n";
		}
		
		// add the movement node
	}
	
	autoTemplate.replaceTag("main", main);
	
	console.log(autoTemplate.writeOutput(eofString));
}

module.exports = path2java;